// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Voting.Basis.Data;

#nullable disable

namespace Voting.Basis.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240313142312_AddVirtualTopLevelDomainOfInfluence")]
    partial class AddVirtualTopLevelDomainOfInfluence
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Voting.Basis.Data.Models.Authority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId")
                        .IsUnique();

                    b.ToTable("Authorities");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Ballot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BallotType")
                        .HasColumnType("integer");

                    b.Property<bool>("HasTieBreakQuestions")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("VoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoteId", "Position")
                        .IsUnique();

                    b.ToTable("Ballots");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.BallotQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("BallotId");

                    b.HasIndex("Number", "BallotId")
                        .IsUnique();

                    b.ToTable("BallotQuestions");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CantonSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<bool>("CountingMachineEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ElectoralRegistrationEnabled")
                        .HasColumnType("boolean");

                    b.Property<int[]>("EnabledPoliticalBusinessUnionTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("MajorityElectionAbsoluteMajorityAlgorithm")
                        .HasColumnType("integer");

                    b.Property<bool>("MajorityElectionInvalidVotes")
                        .HasColumnType("boolean");

                    b.Property<bool>("MajorityElectionUseCandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<bool>("MultipleVoteBallotsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewZhFeaturesEnabled")
                        .HasColumnType("boolean");

                    b.Property<int[]>("ProportionalElectionMandateAlgorithms")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<bool>("ProportionalElectionUseCandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<int>("ProtocolCountingCircleSortType")
                        .HasColumnType("integer");

                    b.Property<int>("ProtocolDomainOfInfluenceSortType")
                        .HasColumnType("integer");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SwissAbroadVotingRight")
                        .HasColumnType("integer");

                    b.Property<int[]>("SwissAbroadVotingRightDomainOfInfluenceTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("VotingDocumentsEVotingEaiMessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Canton")
                        .IsUnique();

                    b.ToTable("CantonSettings");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CantonSettingsVotingCardChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CantonSettingsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.Property<int>("VotingChannel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CantonSettingsId", "Valid", "VotingChannel")
                        .IsUnique();

                    b.ToTable("CantonSettingsVotingCardChannels");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ComparisonCountOfVotersConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlausibilisationConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ThresholdPercent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PlausibilisationConfigurationId", "Category")
                        .IsUnique();

                    b.ToTable("ComparisonCountOfVotersConfigurations");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ComparisonVoterParticipationConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComparisonLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MainLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlausibilisationConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ThresholdPercent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PlausibilisationConfigurationId", "MainLevel", "ComparisonLevel")
                        .IsUnique();

                    b.ToTable("ComparisonVoterParticipationConfigurations");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ComparisonVotingChannelConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlausibilisationConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ThresholdPercent")
                        .HasColumnType("numeric");

                    b.Property<int>("VotingChannel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlausibilisationConfigurationId", "VotingChannel")
                        .IsUnique();

                    b.ToTable("ComparisonVotingChannelConfigurations");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArchivePer")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EVoting")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EVotingFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EVotingTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndOfTestingPhase")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PastLockPer")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PreviousContestId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("PreviousContestId");

                    b.HasIndex("State", "DomainOfInfluenceId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ContestCountingCircleOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EVoting")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("CountingCircleId", "ContestId")
                        .IsUnique();

                    b.ToTable("ContestCountingCircleOptions");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ContactPersonSameDuringEventAsAfter")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MergeOriginId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MergeTargetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameForProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MergeOriginId")
                        .IsUnique();

                    b.HasIndex("MergeTargetId");

                    b.ToTable("CountingCircles");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CountingCircleContactPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountingCircleAfterEventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountingCircleDuringEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleAfterEventId")
                        .IsUnique();

                    b.HasIndex("CountingCircleDuringEventId")
                        .IsUnique();

                    b.ToTable("CountingCircleContactPersons");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CountingCircleElectorate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<int[]>("DomainOfInfluenceTypes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId");

                    b.ToTable("CountingCircleElectorates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CountingCirclesMerger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CopyFromCountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Merged")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("CountingCirclesMergers");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ExternalPrintingCenter")
                        .HasColumnType("boolean");

                    b.Property<string>("ExternalPrintingCenterEaiMessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoRef")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameForProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ResponsibleForVotingCards")
                        .HasColumnType("boolean");

                    b.Property<string>("SapCustomerOrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("VirtualTopLevel")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DomainOfInfluences");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluenceCountingCircle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ComparisonCountOfVotersCategory")
                        .HasColumnType("integer");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Inherited")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.HasIndex("CountingCircleId", "DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceCountingCircles");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluenceHierarchy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("ChildIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("ParentIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluenceHierarchies");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluenceParty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("DomainOfInfluenceParties");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluencePermissionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("CountingCircleIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsParent")
                        .HasColumnType("boolean");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("DomainOfInfluencePermissions");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ElectionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("PrimaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryMajorityElectionId")
                        .IsUnique();

                    b.ToTable("ElectionGroups");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.EventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("EventContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventTenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PoliticalAssemblyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PoliticalBusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PoliticalBusinessUnionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventTenantId");

                    b.HasIndex("EventUserId");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.EventLogTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("EventLogTenant");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.EventLogUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EventLogUser");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.EventProcessingState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CommitPosition")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("EventNumber")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("PreparePosition")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("EventProcessingStates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ExportConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("EaiMessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("ExportKeys")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("ExportConfigurations");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticBallotBundleNumberGeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticEmptyVoteCounting")
                        .HasColumnType("boolean");

                    b.Property<int>("BallotBundleSampleSize")
                        .HasColumnType("integer");

                    b.Property<int>("BallotBundleSize")
                        .HasColumnType("integer");

                    b.Property<int>("BallotNumberGeneration")
                        .HasColumnType("integer");

                    b.Property<bool>("CandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnforceCandidateCheckDigitForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceEmptyVoteCountingForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceResultEntryForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceReviewProcedureForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<int>("MandateAlgorithm")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReportDomainOfInfluenceLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ResultEntry")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewProcedure")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("MajorityElections");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionBallotGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionId");

                    b.ToTable("MajorityElectionBallotGroups");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionBallotGroupEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("BlankRowCount")
                        .HasColumnType("integer");

                    b.Property<bool>("CandidateCountOk")
                        .HasColumnType("boolean");

                    b.Property<int>("CountOfCandidates")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualCandidatesVoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PrimaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotGroupId");

                    b.HasIndex("PrimaryMajorityElectionId");

                    b.HasIndex("SecondaryMajorityElectionId");

                    b.ToTable("MajorityElectionBallotGroupEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionBallotGroupEntryCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotGroupEntryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PrimaryElectionCandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondaryElectionCandidateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BallotGroupEntryId");

                    b.HasIndex("PrimaryElectionCandidateId");

                    b.HasIndex("SecondaryElectionCandidateId");

                    b.ToTable("MajorityElectionBallotGroupEntryCandidates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CheckDigit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Incumbent")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("OccupationTitle")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Party")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PoliticalFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionId");

                    b.ToTable("MajorityElectionCandidates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionUnion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("MajorityElectionUnions");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionUnionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MajorityElectionUnionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MajorityElectionUnionId");

                    b.HasIndex("MajorityElectionId", "MajorityElectionUnionId")
                        .IsUnique();

                    b.ToTable("MajorityElectionUnionEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.PlausibilisationConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ComparisonValidVotingCardsWithAccountedBallotsThresholdPercent")
                        .HasColumnType("numeric");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId")
                        .IsUnique();

                    b.ToTable("PlausibilisationConfigurations");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.PoliticalAssembly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("PoliticalAssemblies");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.PreconfiguredContestDate", b =>
                {
                    b.Property<DateTime>("Id")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("PreconfiguredContestDates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticBallotBundleNumberGeneration")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticEmptyVoteCounting")
                        .HasColumnType("boolean");

                    b.Property<int>("BallotBundleSampleSize")
                        .HasColumnType("integer");

                    b.Property<int>("BallotBundleSize")
                        .HasColumnType("integer");

                    b.Property<int>("BallotNumberGeneration")
                        .HasColumnType("integer");

                    b.Property<bool>("CandidateCheckDigit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnforceCandidateCheckDigitForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceEmptyVoteCountingForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceReviewProcedureForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<int>("MandateAlgorithm")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReviewProcedure")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("ProportionalElections");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Accumulated")
                        .HasColumnType("boolean");

                    b.Property<int>("AccumulatedPosition")
                        .HasColumnType("integer");

                    b.Property<int>("CheckDigit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Incumbent")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("OccupationTitle")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PartyId")
                        .HasColumnType("uuid");

                    b.Property<string>("PoliticalFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProportionalElectionListId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("ProportionalElectionListId");

                    b.ToTable("ProportionalElectionCandidates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BlankRowCount")
                        .HasColumnType("integer");

                    b.Property<bool>("CandidateCountOk")
                        .HasColumnType("boolean");

                    b.Property<int>("CountOfCandidates")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ListUnionDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("SubListUnionDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionId");

                    b.ToTable("ProportionalElectionLists");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionListUnion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProportionalElectionMainListId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProportionalElectionRootListUnionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionId");

                    b.HasIndex("ProportionalElectionMainListId");

                    b.HasIndex("ProportionalElectionRootListUnionId");

                    b.ToTable("ProportionalElectionListUnions");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionListUnionEntry", b =>
                {
                    b.Property<Guid>("ProportionalElectionListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionListUnionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("ProportionalElectionListId", "ProportionalElectionListUnionId");

                    b.HasIndex("ProportionalElectionListUnionId");

                    b.ToTable("ProportionalElectionListUnionEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.ToTable("ProportionalElectionUnions");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionUnionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionUnionId");

                    b.HasIndex("ProportionalElectionId", "ProportionalElectionUnionId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionUnionEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnionList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProportionalElectionUnionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionUnionId");

                    b.ToTable("ProportionalElectionUnionLists");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnionListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProportionalElectionUnionListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProportionalElectionUnionListId");

                    b.HasIndex("ProportionalElectionListId", "ProportionalElectionUnionListId")
                        .IsUnique();

                    b.ToTable("ProportionalElectionUnionListEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.SecondaryMajorityElection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("AllowedCandidates")
                        .HasColumnType("integer");

                    b.Property<Guid>("ElectionGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfMandates")
                        .HasColumnType("integer");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PrimaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ElectionGroupId");

                    b.HasIndex("PrimaryMajorityElectionId");

                    b.ToTable("SecondaryMajorityElections");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.SecondaryMajorityElectionCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CandidateReferenceId")
                        .HasColumnType("uuid");

                    b.Property<int>("CheckDigit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Incumbent")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("OccupationTitle")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Party")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PoliticalFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PoliticalLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("SecondaryMajorityElectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateReferenceId");

                    b.HasIndex("SecondaryMajorityElectionId");

                    b.ToTable("SecondaryMajorityElectionCandidates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.SimplePoliticalBusiness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BusinessType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("SimplePoliticalBusiness");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Snapshots.AuthoritySnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleId")
                        .IsUnique();

                    b.ToTable("AuthoritySnapshots");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Snapshots.CountingCircleContactPersonSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountingCircleAfterEventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountingCircleDuringEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountingCircleAfterEventId")
                        .IsUnique();

                    b.HasIndex("CountingCircleDuringEventId")
                        .IsUnique();

                    b.ToTable("CountingCircleContactPersonSnapshots");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Snapshots.CountingCircleSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasisId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ContactPersonSameDuringEventAsAfter")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameForProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasisId");

                    b.HasIndex("ValidFrom");

                    b.ToTable("CountingCircleSnapshots");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Snapshots.DomainOfInfluenceCountingCircleSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasisCountingCircleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasisDomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasisId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Inherited")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasisCountingCircleId");

                    b.HasIndex("BasisDomainOfInfluenceId");

                    b.HasIndex("BasisId");

                    b.HasIndex("ValidFrom");

                    b.ToTable("DomainOfInfluenceCountingCircleSnapshots");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Snapshots.DomainOfInfluenceSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BasisId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BasisParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Canton")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExternalPrintingCenter")
                        .HasColumnType("boolean");

                    b.Property<string>("ExternalPrintingCenterEaiMessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameForProtocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ResponsibleForVotingCards")
                        .HasColumnType("boolean");

                    b.Property<string>("SapCustomerOrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecureConnectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SortNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("VirtualTopLevel")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BasisId");

                    b.HasIndex("ValidFrom");

                    b.ToTable("DomainOfInfluenceSnapshots");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.TieBreakQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BallotId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Question1Number")
                        .HasColumnType("integer");

                    b.Property<int>("Question2Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BallotId", "Question1Number", "Question2Number")
                        .IsUnique();

                    b.ToTable("TieBreakQuestions");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutomaticBallotBundleNumberGeneration")
                        .HasColumnType("boolean");

                    b.Property<int>("BallotBundleSampleSizePercent")
                        .HasColumnType("integer");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainOfInfluenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EnforceResultEntryForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnforceReviewProcedureForCountingCircles")
                        .HasColumnType("boolean");

                    b.Property<string>("InternalDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficialDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PoliticalBusinessNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReportDomainOfInfluenceLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ResultAlgorithm")
                        .HasColumnType("integer");

                    b.Property<int>("ResultEntry")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewProcedure")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("DomainOfInfluenceId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Authority", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.CountingCircle", "CountingCircle")
                        .WithOne("ResponsibleAuthority")
                        .HasForeignKey("Voting.Basis.Data.Models.Authority", "CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Ballot", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Vote", "Vote")
                        .WithMany("Ballots")
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.BallotQuestion", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Ballot", "Ballot")
                        .WithMany("BallotQuestions")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ballot");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CantonSettingsVotingCardChannel", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.CantonSettings", "CantonSettings")
                        .WithMany("EnabledVotingCardChannels")
                        .HasForeignKey("CantonSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CantonSettings");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ComparisonCountOfVotersConfiguration", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.PlausibilisationConfiguration", "PlausibilisationConfiguration")
                        .WithMany("ComparisonCountOfVotersConfigurations")
                        .HasForeignKey("PlausibilisationConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlausibilisationConfiguration");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ComparisonVoterParticipationConfiguration", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.PlausibilisationConfiguration", "PlausibilisationConfiguration")
                        .WithMany("ComparisonVoterParticipationConfigurations")
                        .HasForeignKey("PlausibilisationConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlausibilisationConfiguration");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ComparisonVotingChannelConfiguration", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.PlausibilisationConfiguration", "PlausibilisationConfiguration")
                        .WithMany("ComparisonVotingChannelConfigurations")
                        .HasForeignKey("PlausibilisationConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlausibilisationConfiguration");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Contest", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("Contests")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.Contest", "PreviousContest")
                        .WithMany("PreviousContestOwners")
                        .HasForeignKey("PreviousContestId");

                    b.Navigation("DomainOfInfluence");

                    b.Navigation("PreviousContest");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ContestCountingCircleOption", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Contest", "Contest")
                        .WithMany("CountingCircleOptions")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("ContestOptions")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("CountingCircle");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CountingCircle", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.CountingCirclesMerger", "MergeOrigin")
                        .WithOne("NewCountingCircle")
                        .HasForeignKey("Voting.Basis.Data.Models.CountingCircle", "MergeOriginId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Voting.Basis.Data.Models.CountingCirclesMerger", "MergeTarget")
                        .WithMany("MergedCountingCircles")
                        .HasForeignKey("MergeTargetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MergeOrigin");

                    b.Navigation("MergeTarget");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CountingCircleContactPerson", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.CountingCircle", "CountingCircleAfterEvent")
                        .WithOne("ContactPersonAfterEvent")
                        .HasForeignKey("Voting.Basis.Data.Models.CountingCircleContactPerson", "CountingCircleAfterEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Basis.Data.Models.CountingCircle", "CountingCircleDuringEvent")
                        .WithOne("ContactPersonDuringEvent")
                        .HasForeignKey("Voting.Basis.Data.Models.CountingCircleContactPerson", "CountingCircleDuringEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CountingCircleContactPersons_CountingCircles_CountingCircl~1");

                    b.Navigation("CountingCircleAfterEvent");

                    b.Navigation("CountingCircleDuringEvent");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CountingCircleElectorate", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("Electorates")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluence", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Voting.Basis.Data.Models.ContactPerson", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MobilePhone")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Basis.Data.Models.DomainOfInfluenceVotingCardPrintData", "PrintData", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ShippingAway")
                                .HasColumnType("integer");

                            b1.Property<int>("ShippingMethod")
                                .HasColumnType("integer");

                            b1.Property<int>("ShippingReturn")
                                .HasColumnType("integer");

                            b1.Property<bool>("ShippingVotingCardsToDeliveryAddress")
                                .HasColumnType("boolean");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Basis.Data.Models.DomainOfInfluenceVotingCardReturnAddress", "ReturnAddress", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressAddition")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Basis.Data.Models.DomainOfInfluenceVotingCardSwissPostData", "SwissPostData", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FrankingLicenceReturnNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("InvoiceReferenceNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.OwnsOne("Voting.Basis.Data.Models.DomainOfInfluenceCantonDefaults", "CantonDefaults", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Canton")
                                .HasColumnType("integer");

                            b1.Property<int[]>("EnabledPoliticalBusinessUnionTypes")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<int>("MajorityElectionAbsoluteMajorityAlgorithm")
                                .HasColumnType("integer");

                            b1.Property<bool>("MajorityElectionInvalidVotes")
                                .HasColumnType("boolean");

                            b1.Property<bool>("MajorityElectionUseCandidateCheckDigit")
                                .HasColumnType("boolean");

                            b1.Property<bool>("MultipleVoteBallotsEnabled")
                                .HasColumnType("boolean");

                            b1.Property<int[]>("ProportionalElectionMandateAlgorithms")
                                .IsRequired()
                                .HasColumnType("integer[]");

                            b1.Property<bool>("ProportionalElectionUseCandidateCheckDigit")
                                .HasColumnType("boolean");

                            b1.Property<int>("SwissAbroadVotingRight")
                                .HasColumnType("integer");

                            b1.HasKey("DomainOfInfluenceId");

                            b1.ToTable("DomainOfInfluences");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceId");
                        });

                    b.Navigation("CantonDefaults")
                        .IsRequired();

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("PrintData");

                    b.Navigation("ReturnAddress");

                    b.Navigation("SwissPostData");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluenceCountingCircle", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.CountingCircle", "CountingCircle")
                        .WithMany("DomainOfInfluences")
                        .HasForeignKey("CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("CountingCircles")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluenceParty", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("Parties")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ElectionGroup", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.MajorityElection", "PrimaryMajorityElection")
                        .WithOne("ElectionGroup")
                        .HasForeignKey("Voting.Basis.Data.Models.ElectionGroup", "PrimaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.EventLog", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.EventLogTenant", "EventTenant")
                        .WithMany("EventLogs")
                        .HasForeignKey("EventTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.EventLogUser", "EventUser")
                        .WithMany("EventLogs")
                        .HasForeignKey("EventUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventTenant");

                    b.Navigation("EventUser");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ExportConfiguration", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("ExportConfigurations")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElection", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Contest", "Contest")
                        .WithMany("MajorityElections")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("MajorityElections")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionBallotGroup", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.MajorityElection", "MajorityElection")
                        .WithMany("BallotGroups")
                        .HasForeignKey("MajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorityElection");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionBallotGroupEntry", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.MajorityElectionBallotGroup", "BallotGroup")
                        .WithMany("Entries")
                        .HasForeignKey("BallotGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.MajorityElection", "PrimaryMajorityElection")
                        .WithMany("BallotGroupEntries")
                        .HasForeignKey("PrimaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Basis.Data.Models.SecondaryMajorityElection", "SecondaryMajorityElection")
                        .WithMany("BallotGroupEntries")
                        .HasForeignKey("SecondaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BallotGroup");

                    b.Navigation("PrimaryMajorityElection");

                    b.Navigation("SecondaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionBallotGroupEntryCandidate", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.MajorityElectionBallotGroupEntry", "BallotGroupEntry")
                        .WithMany("Candidates")
                        .HasForeignKey("BallotGroupEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.MajorityElectionCandidate", "PrimaryElectionCandidate")
                        .WithMany("BallotGroupEntries")
                        .HasForeignKey("PrimaryElectionCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_MajorityElectionBallotGroupEntryCandidates_MajorityElectio~1");

                    b.HasOne("Voting.Basis.Data.Models.SecondaryMajorityElectionCandidate", "SecondaryElectionCandidate")
                        .WithMany("BallotGroupEntries")
                        .HasForeignKey("SecondaryElectionCandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BallotGroupEntry");

                    b.Navigation("PrimaryElectionCandidate");

                    b.Navigation("SecondaryElectionCandidate");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionCandidate", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.MajorityElection", "MajorityElection")
                        .WithMany("MajorityElectionCandidates")
                        .HasForeignKey("MajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorityElection");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionUnion", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Contest", "Contest")
                        .WithMany("MajorityElectionUnions")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionUnionEntry", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.MajorityElection", "MajorityElection")
                        .WithMany("MajorityElectionUnionEntries")
                        .HasForeignKey("MajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.MajorityElectionUnion", "MajorityElectionUnion")
                        .WithMany("MajorityElectionUnionEntries")
                        .HasForeignKey("MajorityElectionUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MajorityElection");

                    b.Navigation("MajorityElectionUnion");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.PlausibilisationConfiguration", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithOne("PlausibilisationConfiguration")
                        .HasForeignKey("Voting.Basis.Data.Models.PlausibilisationConfiguration", "DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.PoliticalAssembly", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("PoliticalAssemblies")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElection", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Contest", "Contest")
                        .WithMany("ProportionalElections")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("ProportionalElections")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionCandidate", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluenceParty", "Party")
                        .WithMany("ProportionalElectionCandidates")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Voting.Basis.Data.Models.ProportionalElectionList", "ProportionalElectionList")
                        .WithMany("ProportionalElectionCandidates")
                        .HasForeignKey("ProportionalElectionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("ProportionalElectionList");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionList", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithMany("ProportionalElectionLists")
                        .HasForeignKey("ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElection");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionListUnion", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithMany("ProportionalElectionListUnions")
                        .HasForeignKey("ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.ProportionalElectionList", "ProportionalElectionMainList")
                        .WithMany("ProportionalElectionMainListUnions")
                        .HasForeignKey("ProportionalElectionMainListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Basis.Data.Models.ProportionalElectionListUnion", "ProportionalElectionRootListUnion")
                        .WithMany("ProportionalElectionSubListUnions")
                        .HasForeignKey("ProportionalElectionRootListUnionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProportionalElection");

                    b.Navigation("ProportionalElectionMainList");

                    b.Navigation("ProportionalElectionRootListUnion");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionListUnionEntry", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.ProportionalElectionList", "ProportionalElectionList")
                        .WithMany("ProportionalElectionListUnionEntries")
                        .HasForeignKey("ProportionalElectionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.ProportionalElectionListUnion", "ProportionalElectionListUnion")
                        .WithMany("ProportionalElectionListUnionEntries")
                        .HasForeignKey("ProportionalElectionListUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProportionalElectionListUnionEntries_ProportionalElectionL~1");

                    b.Navigation("ProportionalElectionList");

                    b.Navigation("ProportionalElectionListUnion");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnion", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Contest", "Contest")
                        .WithMany("ProportionalElectionUnions")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnionEntry", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.ProportionalElection", "ProportionalElection")
                        .WithMany("ProportionalElectionUnionEntries")
                        .HasForeignKey("ProportionalElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.ProportionalElectionUnion", "ProportionalElectionUnion")
                        .WithMany("ProportionalElectionUnionEntries")
                        .HasForeignKey("ProportionalElectionUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElection");

                    b.Navigation("ProportionalElectionUnion");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnionList", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.ProportionalElectionUnion", "ProportionalElectionUnion")
                        .WithMany("ProportionalElectionUnionLists")
                        .HasForeignKey("ProportionalElectionUnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionUnion");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnionListEntry", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.ProportionalElectionList", "ProportionalElectionList")
                        .WithMany("ProportionalElectionUnionListEntries")
                        .HasForeignKey("ProportionalElectionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.ProportionalElectionUnionList", "ProportionalElectionUnionList")
                        .WithMany("ProportionalElectionUnionListEntries")
                        .HasForeignKey("ProportionalElectionUnionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProportionalElectionList");

                    b.Navigation("ProportionalElectionUnionList");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.SecondaryMajorityElection", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.ElectionGroup", "ElectionGroup")
                        .WithMany("SecondaryMajorityElections")
                        .HasForeignKey("ElectionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.MajorityElection", "PrimaryMajorityElection")
                        .WithMany("SecondaryMajorityElections")
                        .HasForeignKey("PrimaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectionGroup");

                    b.Navigation("PrimaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.SecondaryMajorityElectionCandidate", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.MajorityElectionCandidate", "CandidateReference")
                        .WithMany("CandidateReferences")
                        .HasForeignKey("CandidateReferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Basis.Data.Models.SecondaryMajorityElection", "SecondaryMajorityElection")
                        .WithMany("Candidates")
                        .HasForeignKey("SecondaryMajorityElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateReference");

                    b.Navigation("SecondaryMajorityElection");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.SimplePoliticalBusiness", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Contest", "Contest")
                        .WithMany("SimplePoliticalBusinesses")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("SimplePoliticalBusinesses")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Snapshots.AuthoritySnapshot", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Snapshots.CountingCircleSnapshot", "CountingCircle")
                        .WithOne("ResponsibleAuthority")
                        .HasForeignKey("Voting.Basis.Data.Models.Snapshots.AuthoritySnapshot", "CountingCircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountingCircle");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Snapshots.CountingCircleContactPersonSnapshot", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Snapshots.CountingCircleSnapshot", "CountingCircleAfterEvent")
                        .WithOne("ContactPersonAfterEvent")
                        .HasForeignKey("Voting.Basis.Data.Models.Snapshots.CountingCircleContactPersonSnapshot", "CountingCircleAfterEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voting.Basis.Data.Models.Snapshots.CountingCircleSnapshot", "CountingCircleDuringEvent")
                        .WithOne("ContactPersonDuringEvent")
                        .HasForeignKey("Voting.Basis.Data.Models.Snapshots.CountingCircleContactPersonSnapshot", "CountingCircleDuringEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CountingCircleContactPersonSnapshots_CountingCircleSnapsho~1");

                    b.Navigation("CountingCircleAfterEvent");

                    b.Navigation("CountingCircleDuringEvent");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Snapshots.DomainOfInfluenceSnapshot", b =>
                {
                    b.OwnsOne("Voting.Basis.Data.Models.ContactPerson", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceSnapshotId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MobilePhone")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceSnapshotId");

                            b1.ToTable("DomainOfInfluenceSnapshots");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceSnapshotId");
                        });

                    b.OwnsOne("Voting.Basis.Data.Models.DomainOfInfluenceVotingCardPrintData", "PrintData", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceSnapshotId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ShippingAway")
                                .HasColumnType("integer");

                            b1.Property<int>("ShippingMethod")
                                .HasColumnType("integer");

                            b1.Property<int>("ShippingReturn")
                                .HasColumnType("integer");

                            b1.Property<bool>("ShippingVotingCardsToDeliveryAddress")
                                .HasColumnType("boolean");

                            b1.HasKey("DomainOfInfluenceSnapshotId");

                            b1.ToTable("DomainOfInfluenceSnapshots");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceSnapshotId");
                        });

                    b.OwnsOne("Voting.Basis.Data.Models.DomainOfInfluenceVotingCardReturnAddress", "ReturnAddress", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceSnapshotId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AddressAddition")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceSnapshotId");

                            b1.ToTable("DomainOfInfluenceSnapshots");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceSnapshotId");
                        });

                    b.OwnsOne("Voting.Basis.Data.Models.DomainOfInfluenceVotingCardSwissPostData", "SwissPostData", b1 =>
                        {
                            b1.Property<Guid>("DomainOfInfluenceSnapshotId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FrankingLicenceReturnNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("InvoiceReferenceNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DomainOfInfluenceSnapshotId");

                            b1.ToTable("DomainOfInfluenceSnapshots");

                            b1.WithOwner()
                                .HasForeignKey("DomainOfInfluenceSnapshotId");
                        });

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("PrintData");

                    b.Navigation("ReturnAddress");

                    b.Navigation("SwissPostData");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.TieBreakQuestion", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Ballot", "Ballot")
                        .WithMany("TieBreakQuestions")
                        .HasForeignKey("BallotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ballot");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Vote", b =>
                {
                    b.HasOne("Voting.Basis.Data.Models.Contest", "Contest")
                        .WithMany("Votes")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Basis.Data.Models.DomainOfInfluence", "DomainOfInfluence")
                        .WithMany("Votes")
                        .HasForeignKey("DomainOfInfluenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("DomainOfInfluence");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Ballot", b =>
                {
                    b.Navigation("BallotQuestions");

                    b.Navigation("TieBreakQuestions");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CantonSettings", b =>
                {
                    b.Navigation("EnabledVotingCardChannels");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Contest", b =>
                {
                    b.Navigation("CountingCircleOptions");

                    b.Navigation("MajorityElectionUnions");

                    b.Navigation("MajorityElections");

                    b.Navigation("PreviousContestOwners");

                    b.Navigation("ProportionalElectionUnions");

                    b.Navigation("ProportionalElections");

                    b.Navigation("SimplePoliticalBusinesses");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CountingCircle", b =>
                {
                    b.Navigation("ContactPersonAfterEvent");

                    b.Navigation("ContactPersonDuringEvent")
                        .IsRequired();

                    b.Navigation("ContestOptions");

                    b.Navigation("DomainOfInfluences");

                    b.Navigation("Electorates");

                    b.Navigation("ResponsibleAuthority")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.CountingCirclesMerger", b =>
                {
                    b.Navigation("MergedCountingCircles");

                    b.Navigation("NewCountingCircle");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluence", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Contests");

                    b.Navigation("CountingCircles");

                    b.Navigation("ExportConfigurations");

                    b.Navigation("MajorityElections");

                    b.Navigation("Parties");

                    b.Navigation("PlausibilisationConfiguration");

                    b.Navigation("PoliticalAssemblies");

                    b.Navigation("ProportionalElections");

                    b.Navigation("SimplePoliticalBusinesses");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.DomainOfInfluenceParty", b =>
                {
                    b.Navigation("ProportionalElectionCandidates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ElectionGroup", b =>
                {
                    b.Navigation("SecondaryMajorityElections");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.EventLogTenant", b =>
                {
                    b.Navigation("EventLogs");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.EventLogUser", b =>
                {
                    b.Navigation("EventLogs");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElection", b =>
                {
                    b.Navigation("BallotGroupEntries");

                    b.Navigation("BallotGroups");

                    b.Navigation("ElectionGroup");

                    b.Navigation("MajorityElectionCandidates");

                    b.Navigation("MajorityElectionUnionEntries");

                    b.Navigation("SecondaryMajorityElections");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionBallotGroup", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionBallotGroupEntry", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionCandidate", b =>
                {
                    b.Navigation("BallotGroupEntries");

                    b.Navigation("CandidateReferences");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.MajorityElectionUnion", b =>
                {
                    b.Navigation("MajorityElectionUnionEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.PlausibilisationConfiguration", b =>
                {
                    b.Navigation("ComparisonCountOfVotersConfigurations");

                    b.Navigation("ComparisonVoterParticipationConfigurations");

                    b.Navigation("ComparisonVotingChannelConfigurations");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElection", b =>
                {
                    b.Navigation("ProportionalElectionListUnions");

                    b.Navigation("ProportionalElectionLists");

                    b.Navigation("ProportionalElectionUnionEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionList", b =>
                {
                    b.Navigation("ProportionalElectionCandidates");

                    b.Navigation("ProportionalElectionListUnionEntries");

                    b.Navigation("ProportionalElectionMainListUnions");

                    b.Navigation("ProportionalElectionUnionListEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionListUnion", b =>
                {
                    b.Navigation("ProportionalElectionListUnionEntries");

                    b.Navigation("ProportionalElectionSubListUnions");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnion", b =>
                {
                    b.Navigation("ProportionalElectionUnionEntries");

                    b.Navigation("ProportionalElectionUnionLists");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.ProportionalElectionUnionList", b =>
                {
                    b.Navigation("ProportionalElectionUnionListEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.SecondaryMajorityElection", b =>
                {
                    b.Navigation("BallotGroupEntries");

                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.SecondaryMajorityElectionCandidate", b =>
                {
                    b.Navigation("BallotGroupEntries");
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Snapshots.CountingCircleSnapshot", b =>
                {
                    b.Navigation("ContactPersonAfterEvent");

                    b.Navigation("ContactPersonDuringEvent")
                        .IsRequired();

                    b.Navigation("ResponsibleAuthority")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Basis.Data.Models.Vote", b =>
                {
                    b.Navigation("Ballots");
                });
#pragma warning restore 612, 618
        }
    }
}
